package gob.igm.ec.controladores;

import gob.igm.ec.Tentidad;
import gob.igm.ec.controladores.util.EncriptUtil;
import gob.igm.ec.controladores.util.JsfUtil;
import gob.igm.ec.controladores.util.JsfUtil.PersistAction;
import gob.igm.ec.servicios.TentidadFacade;
import java.io.IOException;

import java.io.Serializable;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.ejb.EJB;
import javax.ejb.EJBException;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import javax.persistence.EntityManager;
import validar.*;

@Named("tentidadController")
@SessionScoped
public class TentidadController implements Serializable {

    @EJB
    private gob.igm.ec.servicios.TentidadFacade ejbFacade;
    
    private List<Tentidad> items = null;
    private Tentidad selected;
    private String claveConfirma;
    private String mensaje;
    private EncriptUtil encriptUtil;
    private String encriptado;
    
    public TentidadController() {
    }

    public Tentidad getSelected() {
        return selected;
    }

    public void setSelected(Tentidad selected) {
        this.selected = selected;
    }

    protected void setEmbeddableKeys() {
    }

    protected void initializeEmbeddableKey() {
    }

    private TentidadFacade getFacade() {
        return ejbFacade;
    }

    public Tentidad prepareCreate() {
        selected = new Tentidad();
        initializeEmbeddableKey();
        return selected;
    }

    public void create() {
        persist(PersistAction.CREATE, ResourceBundle.getBundle("/Bundle").getString("TentidadCreated"));
        if (!JsfUtil.isValidationFailed()) {
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public void booking() {
        try {
            List<Object> usuario=null;
            ValidarIdentificacion validaID=new ValidarIdentificacion();
            
            usuario = this.ejbFacade.buscarExisteUsuario(selected.getCiu());
            if (usuario.isEmpty()){
                if (validaID.validarCedula(selected.getCiu())){
                    try {
                        this.encriptUtil=new EncriptUtil();
                        encriptado = this.encriptUtil.encrypt3DES(selected.getClave());
                        selected.setClave(encriptado);
                    } catch (NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | IOException | IllegalStateException | IllegalBlockSizeException | BadPaddingException ex) {
                        Logger.getLogger(TentidadController.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    persist(PersistAction.CREATE, ResourceBundle.getBundle("/Bundle").getString("TentidadCreated"));
                    if (!JsfUtil.isValidationFailed()) {
                        items = null;    // Invalidate list of items to trigger re-query.
                    }
                    
                } else {
                    JsfUtil.addErrorMessage("Número de Identificación no válido, verifique su No. Cedula o RUC");
                }
            } else {
                JsfUtil.addErrorMessage("Cliente con Documento de Identificación "+selected.getCiu()+" ya existe.");
            }
         
            prepareCreate();
            items=null;
            
        } catch (Exception ex) {
            Logger.getLogger(TentidadController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    public void update() {
        persist(PersistAction.UPDATE, ResourceBundle.getBundle("/Bundle").getString("TentidadUpdated"));
    }

    public void destroy() {
        persist(PersistAction.DELETE, ResourceBundle.getBundle("/Bundle").getString("TentidadDeleted"));
        if (!JsfUtil.isValidationFailed()) {
            selected = null; // Remove selection
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public List<Tentidad> getItems() {
        if (items == null) {
            items = getFacade().findAll();
        }
        return items;
    }

    private void persist(PersistAction persistAction, String successMessage) {
        if (selected != null) {
            setEmbeddableKeys();
            try {
                if (persistAction != PersistAction.DELETE) {
                    getFacade().edit(selected);
                } else {
                    getFacade().remove(selected);
                }
                JsfUtil.addSuccessMessage(successMessage);
            } catch (EJBException ex) {
                String msg = "";
                Throwable cause = ex.getCause();
                if (cause != null) {
                    msg = cause.getLocalizedMessage();
                }
                if (msg.length() > 0) {
                    JsfUtil.addErrorMessage(msg);
                } else {
                    JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
                }
            } catch (Exception ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle("/Bundle").getString("PersistenceErrorOccured"));
            }
        }
    }

    public Tentidad getTentidad(java.lang.String id) {
        return getFacade().find(id);
    }

    public List<Tentidad> getItemsAvailableSelectMany() {
        return getFacade().findAll();
    }

    public List<Tentidad> getItemsAvailableSelectOne() {
        return getFacade().findAll();
    }

    /**
     * @return the claveConfirma
     */
    public String getClaveConfirma() {
        return claveConfirma;
    }

    /**
     * @param claveConfirma the claveConfirma to set
     */
    public void setClaveConfirma(String claveConfirma) {
        this.claveConfirma = claveConfirma;
    }
    
/**
     * @return the mensaje
     */
    public String getMensaje() {
        return mensaje;
    }

    /**
     * @param mensaje the mensaje to set
     */
    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }    

    @FacesConverter(forClass = Tentidad.class)
    public static class TentidadControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            TentidadController controller = (TentidadController) facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "tentidadController");
            return controller.getTentidad(getKey(value));
        }

        java.lang.String getKey(String value) {
            java.lang.String key;
            key = value;
            return key;
        }

        String getStringKey(java.lang.String value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof Tentidad) {
                Tentidad o = (Tentidad) object;
                return getStringKey(o.getCiu());
            } else {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "object {0} is of type {1}; expected type: {2}", new Object[]{object, object.getClass().getName(), Tentidad.class.getName()});
                return null;
            }
        }
    }
    
}
